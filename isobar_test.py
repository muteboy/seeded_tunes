#!/usr/bin/env python3
import isobar as iso
import random
import logging
logging.basicConfig(level=logging.INFO, format="[%(asctime)s] %(message)s")

#------------------------------------------------------------------------
# Create a geometric series on a minor scale.
# PingPong plays the series forward then backward. PLoop loops forever.
#------------------------------------------------------------------------
# arpeggio = iso.PSeries(0, 2, 6)
# arpeggio = iso.PDegree(arpeggio, iso.Scale.minor) + 72
# arpeggio = iso.PPingPong(arpeggio)
# arpeggio = iso.PLoop(arpeggio)
melody = iso.PSequence(sequence=[range(35,81)])
#------------------------------------------------------------------------
# Create a velocity sequence, with emphasis every 4th note,
# plus a random walk to create gradual dynamic changes.
# Amplitudes are in the MIDI velocity range (0..127).
#------------------------------------------------------------------------
amplitude = iso.PSequence([50, 35, 25, 35]) + iso.PBrown(0, 1, -20, 20)

#------------------------------------------------------------------------
# Create a repeating sequence with scalar transposition:
# [ 36, 38, 43, 39, 36, 38, 43, 39, ... ]
#------------------------------------------------------------------------
bassline = iso.PSequence([0, 2, 7, 3]) + 48

#------------------------------------------------------------------------
# Repeat each note 3 times, and transpose each into a different octave
# [ 36, 48, 60, 38, 50, 62, ... ]
#------------------------------------------------------------------------
bassline = iso.PStutter(bassline, 3) + iso.PSequence([0, 12, 24])


# drums = iso.PRandomWalk(values=[35, 36, 37, 38, 39, 40, 41])
drums = iso.PSequence(sequence=[x for x in range(35,81)])


filename = "output.mid"
output = iso.MidiOutputDevice()
# output = iso.MidiFileOutputDevice(filename)

timeline = iso.Timeline(tempo=120, output_device=output)

# timeline.stop_when_done=True
#------------------------------------------------------------------------
# Schedule events, with properties generated by the Pattern objects.
#------------------------------------------------------------------------
# timeline.schedule({
#     "note": bassline,
#     "duration": 0.5,
#     # "amplitude": amplitude,
#     "channel": 8
# })
# timeline.schedule({
#     "note": bassline,
#     "duration": 1,
#     "channel": 2
# })
timeline.schedule({
    "note": drums,
    "duration": 2,
    "channel": 9,
    "amplitude" : 100
})

try:
    timeline.run()
except:
    KeyboardInterrupt
# output.write()
